from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.database import DataBase
import bot.keyboards as keyboards
import bot.messages as messages
import config


bot = Bot(token=config.BOT_TOKEN)
router_admin = Router()

database = DataBase(config.DATABASE_URL)

class MessageToUsers(StatesGroup):
    text = State()
    photo = State()


# –ö–æ–º–∞–Ω–¥–∞ /admin
@router_admin.message(F.text.in_({'/admin', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'}))
async def admin_menu(message: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
            if await database.check_admin(session, message.from_user.id) == True:

                await message.answer(
                    f'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                    reply_markup= keyboards.admin_keyboard,
                    parse_mode= 'HTML'
                )

            else:
                pass
    
    except Exception as error:
        print(f'admin_menu error: {error}')


# –†–∞—Å—Å—ã–ª–∫–∞
@router_admin.message(F.text.in_({'üì© –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º', 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –±–µ–∑ –∞–Ω–∫–µ—Ç'}))
async def message_to_all_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
            if await database.check_admin(session, message.from_user.id) == True:

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º—É —Ä–∞—Å—Å—ã–ª–∫–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ state
                if message.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º':
                    await state.update_data(type='to everyone')
                elif message.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –±–µ–∑ –∞–Ω–∫–µ—Ç':
                    await state.update_data(type='without profile')

                await message.answer(
                    f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                    reply_markup= keyboards.dont_send
                )

                await state.set_state(MessageToUsers.text)

            else:
                pass

    except Exception as error:
        print(f'message_to_all_handler error: {error}')


# –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
@router_admin.message(MessageToUsers.text)
async def photo(message: Message, state: FSMContext):

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(text=message.text)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏—è message.entities (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    await state.update_data(entities=message.entities)

    await message.answer(
        f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
        reply_markup= keyboards.without_photo_keyboard
    )

    await state.set_state(MessageToUsers.photo)


# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —Ñ–æ—Ç–æ"
@router_admin.callback_query(F.data == 'WithoutPhoto')
async def without_photo(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    text = data['text']
    entities = data['entities']

    await callback.message.edit_text(
        f'{text}',
        reply_markup= keyboards.question_to_send,
        entities=entities,
        disable_web_page_preview=True
    )


# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ª–∏–±–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ—Å–∏—Ç –∑–∞–Ω–æ–≤–æ —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ
@router_admin.message(MessageToUsers.photo)
async def add_photo(message: Message, state: FSMContext):

    try:
        await state.update_data(photo = message.photo)
        data = await state.get_data()
        photo = data['photo']
        text = data['text']
        entities = data['entities']

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file = await bot.get_file(photo[-1].file_id)
        file_path = file.file_path
        await bot.download_file(file_path, f'bot/images/{photo[-1].file_id}.jpeg')

        await message.answer_photo(
            photo= photo[-1].file_id,
            caption=f'{text}',
            reply_markup= keyboards.question_to_send,
            caption_entities= entities
        )

    except Exception as error:
        print(error)
        await message.answer(
            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            reply_markup= keyboards.question_to_send
        )


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router_admin.callback_query(F.data == 'SendToAll')
async def send_to_all(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    text = data['text']
    entities = data['entities']
    send_type = data['type']
    try:
        photo = data['photo']
    except:
        photo = None

    await callback.answer(
        f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
        show_alert= True
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    if photo:
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async for session in database.get_session():

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                if send_type == 'to everyone':
                    black_list = []
                elif send_type == 'without profile':
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞
                    black_list = await database.get_ids_with_profile(session)

                photo_send = FSInputFile(f'bot/images/{photo[-1].file_id}.jpeg')
                await database.send_message_to_everyone(
                    session,
                    bot,
                    text,
                    entities,
                    photo_send,
                    black_list= black_list
                )

        except Exception as error:
            print(f'send_to_all with photo error: {error}')

    else:
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async for session in database.get_session():

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                if send_type == 'to everyone':
                    black_list = []
                elif send_type == 'without profile':
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç–∞
                    black_list = await database.get_ids_with_profile(session)

                await database.send_message_to_everyone(
                    session,
                    bot,
                    text,
                    entities,
                    black_list= black_list
                )

        except Exception as error:
            print(f'send_to_all without photo error: {error}')


    try:
        await callback.message.edit_text(
            f'{text}\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            entities= entities,
            disable_web_page_preview= True
        )

    except:
        await callback.message.edit_caption(
            None,
            f'{text}\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            entities= entities,
            disable_web_page_preview= True
        )


# –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router_admin.callback_query(F.data == 'DontSendToAll')
async def dont_send_photo(callback: CallbackQuery, state: FSMContext):

    try:
        data = await state.get_data()
        text = data['text']

        try:
            await callback.message.edit_text(f'{text}\n\n‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùóÔ∏è')
        except:
            await callback.message.edit_caption(None, f'{text}\n\n‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùóÔ∏è')
    except:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    await callback.answer(
        f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        show_alert= True
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router_admin.message(F.text == 'üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
            if await database.check_admin(session, message.from_user.id) == True:

                mes = await message.answer(
                    '<b>üîç –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ...',
                    parse_mode='HTML'
                )

                stats = await database.get_stats(session)
                users_amount = stats['users_amount']
                active_profiles_amount = stats['active_profiles_amount']
                closed_profiles_amount = stats['closed_profiles_amount']
                waited_profiles_amount = stats['waited_profiles_amount']
                men_profiles_amount = stats['men_profiles_amount']
                women_profiles_amount =stats['women_profiles_amount']
                men_profiles_closed_amount =stats['men_profiles_closed_amount']
                women_profiles_closed_amount = stats['women_profiles_closed_amount']

                await bot.edit_message_text(
                    f'<b>üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_amount}</b>\n\n<b>–ê–Ω–∫–µ—Ç—ã\n</b>–ú—É–∂—á–∏–Ω—ã: <b>{men_profiles_amount} —á–µ–ª. ({men_profiles_closed_amount} —Å–∫—Ä—ã—Ç–æ)</b>\n–ñ–µ–Ω—â–∏–Ω—ã: <b>{women_profiles_amount} —á–µ–ª. ({women_profiles_closed_amount} —Å–∫—Ä—ã—Ç–æ)</b>\n–í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö: <b>{active_profiles_amount} —à—Ç.</b>\n–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö: <b>{closed_profiles_amount} —à—Ç.</b>\n\n–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{waited_profiles_amount} —à—Ç.</b>\n\n',
                    message.chat.id,
                    mes.message_id,
                    parse_mode= 'html'
                )

            else:
                pass

    except Exception as error:
        print(f'stats error: {error}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
@router_admin.message(F.text == 'üîç –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
async def verification_profiles_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
            if await database.check_admin(session, message.from_user.id) == True:

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                profile_for_verification = await database.get_profile_for_verification(session)

            else:
                return

    except Exception as error:
        print(f'verification_profiles_handler() Session error: {error}')

    try:
        if profile_for_verification is not None:

            profile_id = profile_for_verification.id
            username = profile_for_verification.username
            name = profile_for_verification.name
            age = profile_for_verification.age
            city = profile_for_verification.city
            about = profile_for_verification.about
            target = profile_for_verification.target
            photo = profile_for_verification.photos[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
            if len(profile_for_verification.photos) != 1:
                more_photo = True
            else:
                more_photo = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            if profile_for_verification.status == 'wait':
                await message.answer_photo(
                    photo= FSInputFile(f'photos/{photo}'),
                    caption= await messages.PROFILE_TEXT(name, age, city, about, target),
                    parse_mode= 'HTML',
                    reply_markup= await keyboards.check_waited_profiles(profile_id, username, more_photo= more_photo)
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            elif profile_for_verification.status == 'blocked':
                await message.answer_photo(
                    photo= FSInputFile(f'photos/{photo}'),
                    caption= await messages.PROFILE_TEXT(name, age, city, about, target),
                    parse_mode= 'HTML',
                    reply_markup= await keyboards.check_blocked_profiles(profile_id, more_photo= more_photo)
                )
        
        else:
            await message.answer('–í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!')
            return

    except Exception as error:
        print(f'verification_profiles_handler() error: {error}')
        await message.answer(f'–û—à–∏–±–∫–∞: {error}')


# –õ–∏—Å—Ç–∞–Ω–∏–µ —Ñ–æ—Ç–æ
@router_admin.callback_query(F.data.contains('photo_verification'))
async def photo_verification_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()

    print(callback.data)

    profile_id = callback.data.split()[1]
    photo_num = int(callback.data.split()[2])
    verification = callback.data.split()[3]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    try:
        async for session in database.get_session():
            profile = await database.get_profile_information(session, profile_id)
    except Exception as error:
        print(f'photo_verification_handler() Session error: {error}')

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Ñ–æ—Ç–æ, —Ç–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
        if len(profile.photos) == photo_num + 1:
            next_photo_num = 0
        else:
            next_photo_num = photo_num + 1

        # –í—ã–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        if verification == 'wait':
            keyboard = await keyboards.check_waited_profiles(profile_id, profile.username, more_photo= True, next_photo_num= next_photo_num)
        elif verification == 'blocked':
            keyboard = await keyboards.check_blocked_profiles(profile_id, more_photo= True, next_photo_num= next_photo_num)

        await callback.message.edit_media(
            media= InputMediaPhoto(
                media= FSInputFile(f'photos/{profile.photos[photo_num]}'),
                caption= await messages.PROFILE_TEXT(profile.name, profile.age, profile.city, profile.about, profile.target),
                parse_mode='HTML'
            ), 
            reply_markup= keyboard
        )
    except Exception as error:
        print(f'photo_verification_handler() error: {error}')


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('accept_profile'))
async def accept_profile_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    profile_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_profile(session, profile_id, 'open')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= profile_id,
                photo= FSInputFile('bot/design/accepted_profile.jpeg'),
                caption= '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üòç',
                reply_markup= keyboards.start_keyboard
            )
        except:
            pass

    except Exception as error:
        print(f'accept_profile_handler error: {error}')


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('cancel_profile'))
async def cancel_profile_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∏ username –∞–Ω–∫–µ—Ç—ã
    profile_id = callback.data.split()[1]
    username = callback.data.split()[2]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_profile(session, profile_id, 'canceled')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ùå\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= profile_id,
                photo= FSInputFile('bot/design/canceled_profile.jpeg'),
                caption= messages.CANCELED,
                reply_markup= await keyboards.recreate_keyboard_by_admins(profile_id, username)
            )
        except:
            pass

    except Exception as error:
        print(f'cancel_profile_handler error: {error}')


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('unblock'))
async def unblock_profile_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    profile_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_profile(session, profile_id, 'open')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= profile_id,
                photo= FSInputFile('bot/design/unblocked.jpeg'),
                caption= '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∫–æ–º–∏—Ç—å—Å—è üòç',
                reply_markup= keyboards.start_keyboard
            )
        except:
            pass

    except Exception as error:
        print(f'unblock_profile_handler error: {error}')


# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('ban'))
async def ban_profile_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    profile_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_profile(session, profile_id, 'banned')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ üîê\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= profile_id,
                photo= FSInputFile('bot/design/banned.jpeg'),
                caption= '‚ùå –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.'
            )
        except:
            pass

    except Exception as error:
        print(f'ban_profile_handler error: {error}')