from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.database import DataBase
import bot.keyboards as keyboards
import bot.messages as messages
import config


bot = Bot(token=config.BOT_TOKEN)
router_admin = Router()

database = DataBase(config.DATABASE_URL)

class MessageToUsers(StatesGroup):
    text = State()
    photo = State()


# –ö–æ–º–∞–Ω–¥–∞ /admin
@router_admin.message(F.text.in_({'/admin', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'}))
async def admin_menu(message: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
            if await database.check_admin(session, message.from_user.id) == True:

                await message.answer(
                    f'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                    reply_markup= keyboards.admin_keyboard,
                    parse_mode= 'HTML'
                )

            else:
                pass
    
    except Exception as error:
        print(f'admin_menu error: {error}')

# –†–∞—Å—Å—ã–ª–∫–∞
@router_admin.message(F.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞')
async def message_to_all_handler(message: Message, state: FSMContext):

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
            if await database.check_admin(session, message.from_user.id) == True:

                await message.answer(
                    f'–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                    reply_markup= keyboards.dont_send
                )

                await state.set_state(MessageToUsers.text)

            else:
                pass

    except Exception as error:
        print(f'message_to_all_handler error: {error}')

# –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
@router_admin.message(MessageToUsers.text)
async def photo(message: Message, state: FSMContext):

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(text=message.text)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏—è message.entities (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    await state.update_data(entities=message.entities)

    await message.answer(
        f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
        reply_markup= keyboards.without_photo_keyboard
    )

    await state.set_state(MessageToUsers.photo)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —Ñ–æ—Ç–æ"
@router_admin.callback_query(F.data == 'WithoutPhoto')
async def without_photo(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    text = data['text']
    entities = data['entities']

    await callback.message.edit_text(
        f'{text}',
        reply_markup= keyboards.question_to_send,
        entities=entities,
        disable_web_page_preview=True
    )

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ª–∏–±–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ—Å–∏—Ç –∑–∞–Ω–æ–≤–æ —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ
@router_admin.message(MessageToUsers.photo)
async def add_photo(message: Message, state: FSMContext):

    try:
        await state.update_data(photo = message.photo)
        data = await state.get_data()
        photo = data['photo']
        text = data['text']
        entities = data['entities']

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file = await bot.get_file(photo[-1].file_id)
        file_path = file.file_path
        await bot.download_file(file_path, f'bot/images/{photo[-1].file_id}.jpeg')

        await message.answer_photo(
            photo= photo[-1].file_id,
            caption=f'{text}',
            reply_markup= keyboards.question_to_send,
            caption_entities= entities
        )

    except Exception as error:
        print(error)
        await message.answer(
            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
            reply_markup= keyboards.question_to_send
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router_admin.callback_query(F.data == 'SendToAll')
async def send_to_all(callback: CallbackQuery, state: FSMContext):
    
    data = await state.get_data()
    text = data['text']
    entities = data['entities']
    try:
        photo = data['photo']
    except:
        photo = None

    await callback.answer(
        f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
        show_alert= True
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    if photo:

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async for session in database.get_session():

                photo_send = FSInputFile(f'bot/images/{photo[-1].file_id}.jpeg')
                await database.send_message_to_everyone(
                    session,
                    bot,
                    text,
                    entities,
                    photo_send
                )

        except Exception as error:
            print(f'send_to_all with photo error: {error}')

    else:
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            async for session in database.get_session():

                await database.send_message_to_everyone(
                    session,
                    bot,
                    text,
                    entities
                )

        except Exception as error:
            print(f'send_to_all without photo error: {error}')


    try:
        await callback.message.edit_text(
            f'{text}\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            entities= entities,
            disable_web_page_preview= True
        )

    except:
        await callback.message.edit_caption(
            None,
            f'{text}\n\n‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            entities= entities,
            disable_web_page_preview= True
        )

# –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@router_admin.callback_query(F.data == 'DontSendToAll')
async def dont_send_photo(callback: CallbackQuery, state: FSMContext):

    try:
        data = await state.get_data()
        text = data['text']

        try:
            await callback.message.edit_text(f'{text}\n\n‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùóÔ∏è')
        except:
            await callback.message.edit_caption(None, f'{text}\n\n‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùóÔ∏è')
    except:
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    await callback.answer(
        f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        show_alert= True
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router_admin.message(F.text == 'üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def stats_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞
            if await database.check_admin(session, message.from_user.id) == True:

                mes = await message.answer(
                    '<b>üîç –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ...',
                    parse_mode='HTML'
                )

                stats_text = await database.get_stats(session)

                await bot.edit_message_text(
                    stats_text,
                    message.chat.id,
                    mes.message_id,
                    parse_mode= 'html'
                )

            else:
                pass

    except Exception as error:
        print(f'stats error: {error}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
@router_admin.message(F.text == 'üîç –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
async def verification_forms_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
            if await database.check_admin(session, message.from_user.id) == True:

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                form_for_verification = await database.get_form_for_verification(session)

            else:
                pass


        if form_for_verification is not None:

            form_id = form_for_verification.id
            username = form_for_verification.username
            name = form_for_verification.name
            age = form_for_verification.age
            city = form_for_verification.city
            about = form_for_verification.about
            target = form_for_verification.target
            photo = form_for_verification.photos[0]


            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            if form_for_verification.status == 'wait':
                await message.answer_photo(
                    photo= FSInputFile(f'photos/{photo}'),
                    caption= await messages.FORM_TEXT(name, age, city, about, target),
                    parse_mode= 'HTML',
                    reply_markup= await keyboards.check_waited_forms(form_id, username)
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
            elif form_for_verification.status == 'blocked':
                await message.answer_photo(
                    photo= FSInputFile(f'photos/{photo}'),
                    caption= await messages.FORM_TEXT(name, age, city, about, target),
                    parse_mode= 'HTML',
                    reply_markup= await keyboards.check_blocked_forms(form_id)
                )
        
        else:
            await message.answer('–í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!')
            return

    except Exception as error:
        print(f'stats_handler error: {error}')

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('accept_form'))
async def accept_form_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    form_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_form(session, form_id, 'open')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= form_id,
                photo= FSInputFile('bot/design/accepted_form.jpeg'),
                caption= '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –∑–∞–Ω–∫–æ–º–∏—Ç—å—Å—è üòç',
                reply_markup= keyboards.under_menu_keyboard
            )
        except:
            pass

    except Exception as error:
        print(f'accept_form_handler error: {error}')

# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('cancel_form'))
async def cancel_form_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∏ username –∞–Ω–∫–µ—Ç—ã
    form_id = callback.data.split()[1]
    username = callback.data.split()[2]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_form(session, form_id, 'canceled')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ùå\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= form_id,
                photo= FSInputFile('bot/design/canceled_form.jpeg'),
                caption= '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                reply_markup= await keyboards.recreate_keyboard_by_admins(form_id, username)
            )
        except:
            pass

    except Exception as error:
        print(f'cancel_form_handler error: {error}')

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('unblock'))
async def unblock_form_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    form_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_form(session, form_id, 'open')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= form_id,
                photo= FSInputFile('bot/design/accepted_form.jpeg'),
                caption= '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∫–æ–º–∏—Ç—å—Å—è üòç',
                reply_markup= keyboards.under_menu_keyboard
            )
        except:
            pass

    except Exception as error:
        print(f'unblock_form_handler error: {error}')

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã 
@router_admin.callback_query(F.data.contains('ban'))
async def ban_form_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏
    await state.clear()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ id –∞–Ω–∫–µ—Ç—ã
    form_id = callback.data.split()[1]

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        async for session in database.get_session():
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∫–µ—Ç—ã
            await database.update_status_form(session, form_id, 'banned')


        # –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã 
        await callback.message.edit_caption(
            caption= f'–ê–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ üîê\n\n{callback.message.caption}',
            parse_mode= 'HTML',
            reply_markup= None
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–ª–æ–≤–µ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
            await bot.send_photo(
                chat_id= form_id,
                photo= FSInputFile('bot/design/banned.jpeg'),
                caption= '‚ùå –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.'
            )
        except:
            pass

    except Exception as error:
        print(f'ban_form_handler error: {error}')




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router_admin.message()
async def echo(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()
 
    await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
