from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from bot.database import DataBase
import bot.keyboards as keyboards
import bot.messages as messages
import config


bot = Bot(token=config.BOT_TOKEN)
router_starting = Router()

database = DataBase(config.DATABASE_URL)


# –ö–æ–º–∞–Ω–¥–∞ /start
@router_starting.message(F.text.contains("/start"))
async def accept_agreement_handler(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()

    global start_message
    start_message = await message.answer_video(
        video= FSInputFile('bot/design/start.mp4'),
        caption= messages.START_TEXT_NEW_USER,
        reply_markup= keyboards.check_bot,
        parse_mode= 'HTML'  
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
@router_starting.callback_query(F.data.contains('check_bot'))
async def check_bot_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞
    if callback.from_user.username is None:
        await callback.message.answer(
            messages.CREATE_USERNAME,
            reply_markup= keyboards.check_bot
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    try:
        async for session in database.get_session():

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∫–µ—Ç–µ
            profile = await database.get_profile_information(session, callback.from_user.id)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await database.get_user_information(session, callback.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
            if profile:
                if profile.status == 'banned':
                    await callback.answer(
                        messages.BANNED,
                        show_alert= True
                    )
                    return
                
                elif profile.status == 'canceled':
                    await callback.answer(
                        messages.CANCELED,
                        show_alert= True
                    )
                    return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            if await database.add_user(session, callback):
                # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                stats = await database.get_stats(session)
                users_amount = stats['users_amount']
                await database.notify_admins(
                    session,
                    bot,
                    message_text= f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nUsername: @{callback.from_user.username}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_amount}'
                )

    except Exception as error:
        print(f'check_bot_handler() Session error: {error}')

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∫–µ—Ç—ã
        if profile is None:
            # await callback.message.answer_video(
            #     video= FSInputFile('bot/design/start.mp4'),
            #     caption= messages.START_TEXT_NEW_USER,
            #     reply_markup= await keyboards.registrate(callback.from_user.id, callback.from_user.username)
            # )

            # await callback.message.edit_media(
            #     media= InputMediaPhoto(
            #         media= FSInputFile('bot/design/gift.jpeg'),
            #         caption= messages.START_TEXT_NEW_USER_3,
            #         parse_mode= 'HTML'
            #     ),
            #     reply_markup= await keyboards.registrate(callback.from_user.id, callback.from_user.username)
            # )

            await callback.message.edit_media(
                media= InputMediaPhoto(
                    media= FSInputFile('bot/design/gender.jpeg'),
                    caption= messages.START_TEXT_NEW_USER_2,
                    parse_mode= 'HTML'
                ),
                reply_markup= keyboards.gender_keyboard
            )

        # –í —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏–∏ –∞–Ω–∫–µ—Ç—ã –≤—Ö–æ–¥ –≤ –º–µ–Ω—é
        else:
            global main_menu
            main_menu = await callback.message.answer_photo(
                photo= FSInputFile('bot/design/menu.jpeg'),
                caption= await messages.MENU_TEXT(profile.status, user.sub_status, user.sub_end_date),
                reply_markup= await keyboards.menu_keyboard(profile.status),
                parse_mode= 'html'
            )

            try:
                await bot.delete_message(callback.message.chat.id, start_message.message_id)
            except: pass

    except Exception as error:
        print(f'check_bot_handler() error: {error}')
    

# –í—ã–±–æ—Ä –ø–æ–ª–∞
@router_starting.callback_query(F.data.contains('demo'))
async def demo_profiles_handler(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()

    try:
        mark = callback.data.split()[1]
        gender = callback.data.split()[2]
        number = int(callback.data.split()[3])
        next_demo_profile = number + 1

        try:
            if gender == 'man':
                caption = messages.DEMO_PROFILES_MAN[number-1]
            elif gender == 'woman':
                caption = messages.DEMO_PROFILES_WOMAN[number-1]
        except: pass


        # –ö —Ç–µ–∫—Å—Ç—É –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –∏ —É–±–∏—Ä–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if mark == 'like':
            await callback.message.edit_caption(
                caption= f'–í—ã –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É ‚ù§Ô∏è\n\n{callback.message.caption}',
                reply_markup= None
            )
        elif mark == 'dislike':
            await callback.message.edit_caption(
                caption= f'–í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —ç—Ç–∞ –∞–Ω–∫–µ—Ç–∞ üíî\n\n{callback.message.caption}',
                reply_markup= None
            )


        # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –∞–Ω–∫–µ—Ç–∞, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
        if number == 1:
            await callback.message.edit_media(
                media= InputMediaPhoto(
                    media= FSInputFile(f'photos/demo-{gender}-{number}.jpeg'),
                    caption= caption,
                    parse_mode= 'HTML'
                ),
                reply_markup= await keyboards.demo_profile_keyboard(gender, next_demo_profile)
            )

        # –í—ã–≤–æ–¥ –∞–Ω–∫–µ—Ç, –¥–æ —Ç—Ä–µ—Ç–µ–π
        elif number <= 3:
            await callback.message.answer_photo(
                photo= FSInputFile(f'photos/demo-{gender}-{number}.jpeg'),
                caption= caption,
                parse_mode= 'HTML',
                reply_markup= await keyboards.demo_profile_keyboard(gender, next_demo_profile)
            )

        # –ï—Å–ª–∏ –ø—Ä–æ–ª–∏—Å—Ç–∞–Ω—ã –≤—Å–µ –¥–µ–º–æ –∞–Ω–∫–µ—Ç—ã, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∞—Ç—å—Å—è
        else:
            await callback.message.answer_photo(
                photo= FSInputFile('bot/design/gift.jpeg'),
                caption= messages.START_TEXT_NEW_USER_3,
                parse_mode= 'HTML',
                reply_markup= await keyboards.registrate(callback.from_user.id, callback.from_user.username)
            )

    except Exception as error:
        print(f'demo_profiles_handler() error: {error}')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router_starting.message()
async def echo(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—Ü–∏–∏
    await state.clear()
 
    await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
